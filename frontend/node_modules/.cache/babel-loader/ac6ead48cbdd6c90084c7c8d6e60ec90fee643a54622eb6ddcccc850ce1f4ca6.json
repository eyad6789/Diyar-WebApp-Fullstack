{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth API\nexport const authAPI = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials),\n  getCurrentUser: () => api.get('/auth/me')\n};\n\n// Properties API\nexport const propertiesAPI = {\n  getFeed: filters => api.get('/properties/feed', {\n    params: filters\n  }),\n  getReels: () => api.get('/properties/reels'),\n  createProperty: formData => api.post('/properties', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }),\n  getProperty: propertyId => api.get(`/properties/${propertyId}`),\n  likeProperty: propertyId => api.post(`/properties/${propertyId}/like`),\n  getComments: propertyId => api.get(`/properties/${propertyId}/comments`),\n  addComment: (propertyId, content) => api.post(`/properties/${propertyId}/comments`, {\n    content\n  })\n};\n\n// Property Requests API\nexport const propertyRequestsAPI = {\n  create: requestData => api.post('/property-requests', requestData),\n  getMyRequests: () => api.get('/property-requests/my-requests'),\n  getActiveRequests: (page = 1) => api.get('/property-requests/active', {\n    params: {\n      page\n    }\n  }),\n  updateStatus: (requestId, status) => api.patch(`/property-requests/${requestId}/status`, {\n    status\n  })\n};\n\n// Messages API\nexport const messagesAPI = {\n  getConversations: () => api.get('/messages/conversations'),\n  getConversation: (userId, page = 1) => api.get(`/messages/conversation/${userId}`, {\n    params: {\n      page\n    }\n  }),\n  sendMessage: messageData => api.post('/messages/send', messageData),\n  sendPropertyInquiry: (propertyId, message) => api.post('/messages/property-inquiry', {\n    property_id: propertyId,\n    message\n  }),\n  deleteMessage: messageId => api.delete(`/messages/${messageId}`)\n};\n\n// Notifications API\nexport const notificationsAPI = {\n  getNotifications: (page = 1, unreadOnly = false) => api.get('/notifications', {\n    params: {\n      page,\n      unread_only: unreadOnly\n    }\n  }),\n  markAsRead: notificationId => api.patch(`/notifications/${notificationId}/read`),\n  markAllAsRead: () => api.patch('/notifications/mark-all-read'),\n  getUnreadCount: () => api.get('/notifications/unread-count'),\n  deleteNotification: notificationId => api.delete(`/notifications/${notificationId}`)\n};\n\n// Users API\nexport const usersAPI = {\n  getProfile: username => api.get(`/users/${username}`),\n  searchUsers: query => api.get(`/users/search/${query}`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","authAPI","register","userData","post","login","credentials","getCurrentUser","get","propertiesAPI","getFeed","filters","params","getReels","createProperty","formData","getProperty","propertyId","likeProperty","getComments","addComment","content","propertyRequestsAPI","requestData","getMyRequests","getActiveRequests","page","updateStatus","requestId","status","patch","messagesAPI","getConversations","getConversation","userId","sendMessage","messageData","sendPropertyInquiry","message","property_id","deleteMessage","messageId","delete","notificationsAPI","getNotifications","unreadOnly","unread_only","markAsRead","notificationId","markAllAsRead","getUnreadCount","deleteNotification","usersAPI","getProfile","username","searchUsers","query"],"sources":["D:/projects/real-estate-dalali/instagram-clone/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth API\nexport const authAPI = {\n  register: (userData) => api.post('/auth/register', userData),\n  login: (credentials) => api.post('/auth/login', credentials),\n  getCurrentUser: () => api.get('/auth/me'),\n};\n\n// Properties API\nexport const propertiesAPI = {\n  getFeed: (filters) => api.get('/properties/feed', { params: filters }),\n  getReels: () => api.get('/properties/reels'),\n  createProperty: (formData) => api.post('/properties', formData, {\n    headers: { 'Content-Type': 'multipart/form-data' }\n  }),\n  getProperty: (propertyId) => api.get(`/properties/${propertyId}`),\n  likeProperty: (propertyId) => api.post(`/properties/${propertyId}/like`),\n  getComments: (propertyId) => api.get(`/properties/${propertyId}/comments`),\n  addComment: (propertyId, content) => api.post(`/properties/${propertyId}/comments`, { content }),\n};\n\n// Property Requests API\nexport const propertyRequestsAPI = {\n  create: (requestData) => api.post('/property-requests', requestData),\n  getMyRequests: () => api.get('/property-requests/my-requests'),\n  getActiveRequests: (page = 1) => api.get('/property-requests/active', { params: { page } }),\n  updateStatus: (requestId, status) => api.patch(`/property-requests/${requestId}/status`, { status }),\n};\n\n// Messages API\nexport const messagesAPI = {\n  getConversations: () => api.get('/messages/conversations'),\n  getConversation: (userId, page = 1) => api.get(`/messages/conversation/${userId}`, { params: { page } }),\n  sendMessage: (messageData) => api.post('/messages/send', messageData),\n  sendPropertyInquiry: (propertyId, message) => api.post('/messages/property-inquiry', { property_id: propertyId, message }),\n  deleteMessage: (messageId) => api.delete(`/messages/${messageId}`),\n};\n\n// Notifications API\nexport const notificationsAPI = {\n  getNotifications: (page = 1, unreadOnly = false) => api.get('/notifications', { params: { page, unread_only: unreadOnly } }),\n  markAsRead: (notificationId) => api.patch(`/notifications/${notificationId}/read`),\n  markAllAsRead: () => api.patch('/notifications/mark-all-read'),\n  getUnreadCount: () => api.get('/notifications/unread-count'),\n  deleteNotification: (notificationId) => api.delete(`/notifications/${notificationId}`),\n};\n\n// Users API\nexport const usersAPI = {\n  getProfile: (username) => api.get(`/users/${username}`),\n  searchUsers: (query) => api.get(`/users/search/${query}`),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}