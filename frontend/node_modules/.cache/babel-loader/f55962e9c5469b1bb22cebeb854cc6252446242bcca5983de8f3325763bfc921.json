{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth API\nexport const authAPI = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials),\n  getCurrentUser: () => api.get('/auth/me')\n};\n\n// Properties API\nexport const propertiesAPI = {\n  getFeed: (filters = {}) => {\n    const params = new URLSearchParams();\n    Object.keys(filters).forEach(key => {\n      if (filters[key]) params.append(key, filters[key]);\n    });\n    return api.get(`/properties/feed?${params}`);\n  },\n  getReels: () => api.get('/properties/reels'),\n  createProperty: formData => api.post('/properties', formData),\n  getProperty: id => api.get(`/properties/${id}`),\n  getUserProperties: username => api.get(`/properties/user/${username}`),\n  likeProperty: id => api.post(`/properties/${id}/like`),\n  getComments: id => api.get(`/properties/${id}/comments`),\n  addComment: (id, content) => api.post(`/properties/${id}/comments`, {\n    content\n  })\n};\n\n// Property Requests API\nexport const propertyRequestsAPI = {\n  createRequest: requestData => api.post('/property-requests', requestData),\n  getUserRequests: () => api.get('/property-requests/my-requests'),\n  getActiveRequests: (page = 1) => api.get('/property-requests/active', {\n    params: {\n      page\n    }\n  }),\n  updateStatus: (requestId, status) => api.patch(`/property-requests/${requestId}/status`, {\n    status\n  })\n};\n\n// Messages API\nexport const messagesAPI = {\n  getConversations: () => api.get('/messages/conversations'),\n  getConversation: (userId, page = 1) => api.get(`/messages/conversation/${userId}`, {\n    params: {\n      page\n    }\n  }),\n  sendMessage: messageData => api.post('/messages/send', messageData),\n  sendPropertyInquiry: (propertyId, message) => api.post('/messages/property-inquiry', {\n    property_id: propertyId,\n    message\n  }),\n  deleteMessage: messageId => api.delete(`/messages/${messageId}`)\n};\n\n// Notifications API\nexport const notificationsAPI = {\n  getNotifications: (params = {}) => api.get('/notifications', {\n    params\n  }),\n  getUnreadCount: () => api.get('/notifications/unread-count'),\n  markAsRead: id => api.patch(`/notifications/${id}/read`),\n  markAllAsRead: () => api.patch('/notifications/mark-all-read'),\n  deleteNotification: id => api.delete(`/notifications/${id}`)\n};\n\n// Users API\nexport const usersAPI = {\n  getProfile: username => api.get(`/users/${username}`),\n  searchUsers: query => api.get(`/users/search/${query}`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","authAPI","register","userData","post","login","credentials","getCurrentUser","get","propertiesAPI","getFeed","filters","params","URLSearchParams","Object","keys","forEach","key","append","getReels","createProperty","formData","getProperty","id","getUserProperties","username","likeProperty","getComments","addComment","content","propertyRequestsAPI","createRequest","requestData","getUserRequests","getActiveRequests","page","updateStatus","requestId","status","patch","messagesAPI","getConversations","getConversation","userId","sendMessage","messageData","sendPropertyInquiry","propertyId","message","property_id","deleteMessage","messageId","delete","notificationsAPI","getNotifications","getUnreadCount","markAsRead","markAllAsRead","deleteNotification","usersAPI","getProfile","searchUsers","query"],"sources":["D:/projects/real-estate-dalali/instagram-clone/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Auth API\nexport const authAPI = {\n  register: (userData) => api.post('/auth/register', userData),\n  login: (credentials) => api.post('/auth/login', credentials),\n  getCurrentUser: () => api.get('/auth/me'),\n};\n\n// Properties API\nexport const propertiesAPI = {\n  getFeed: (filters = {}) => {\n    const params = new URLSearchParams();\n    Object.keys(filters).forEach(key => {\n      if (filters[key]) params.append(key, filters[key]);\n    });\n    return api.get(`/properties/feed?${params}`);\n  },\n  getReels: () => api.get('/properties/reels'),\n  createProperty: (formData) => api.post('/properties', formData),\n  getProperty: (id) => api.get(`/properties/${id}`),\n  getUserProperties: (username) => api.get(`/properties/user/${username}`),\n  likeProperty: (id) => api.post(`/properties/${id}/like`),\n  getComments: (id) => api.get(`/properties/${id}/comments`),\n  addComment: (id, content) => api.post(`/properties/${id}/comments`, { content })\n};\n\n// Property Requests API\nexport const propertyRequestsAPI = {\n  createRequest: (requestData) => api.post('/property-requests', requestData),\n  getUserRequests: () => api.get('/property-requests/my-requests'),\n  getActiveRequests: (page = 1) => api.get('/property-requests/active', { params: { page } }),\n  updateStatus: (requestId, status) => api.patch(`/property-requests/${requestId}/status`, { status }),\n};\n\n// Messages API\nexport const messagesAPI = {\n  getConversations: () => api.get('/messages/conversations'),\n  getConversation: (userId, page = 1) => api.get(`/messages/conversation/${userId}`, { params: { page } }),\n  sendMessage: (messageData) => api.post('/messages/send', messageData),\n  sendPropertyInquiry: (propertyId, message) => api.post('/messages/property-inquiry', { property_id: propertyId, message }),\n  deleteMessage: (messageId) => api.delete(`/messages/${messageId}`),\n};\n\n// Notifications API\nexport const notificationsAPI = {\n  getNotifications: (params = {}) => api.get('/notifications', { params }),\n  getUnreadCount: () => api.get('/notifications/unread-count'),\n  markAsRead: (id) => api.patch(`/notifications/${id}/read`),\n  markAllAsRead: () => api.patch('/notifications/mark-all-read'),\n  deleteNotification: (id) => api.delete(`/notifications/${id}`)\n};\n\n// Users API\nexport const usersAPI = {\n  getProfile: (username) => api.get(`/users/${username}`),\n  searchUsers: (query) => api.get(`/users/search/${query}`),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}